<!DOCTYPE html>
<html>
  <head>
	<title>Brad Bolander</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
		<link rel='stylesheet' href='/stylesheets/magic.min.css' />
    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"/>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/pixi.js/3.0.7/pixi.js"></script>
  </head>
  <body>
    <script id="fragShader" type="shader-code">
        precision mediump float;
        uniform vec2      resolution;
        uniform float     time;
        uniform float     alpha;
        uniform vec2      speed;
        uniform float     shift;
        
        // Generate random number
        float rand(vec2 n) {
                return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
        }
        
        // Generate Noise
        float noise(vec2 n) {
                const vec2 d = vec2(0.0, 1.0);
                vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
                return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
        }
        
        // Generate Fractal Brownian Motion
        float fbm(vec2 n) {
                float total = 0.0, amplitude = 1.2;
                for (int i = 0; i < 4; i++) {
                total += noise(n) * amplitude;
                n += n;
                amplitude *= 0.5;
                }
                return total;
        }
        
        void main() {
            const vec3 c1 = vec3(6.0/215.0, 0.0/155.0, 7.0/155.0);
            const vec3 c2 = vec3(130.0/255.0, 10.0/195.0, 11.4/255.0);
            const vec3 c3 = vec3(0.2, 0.0, 0.0);
            const vec3 c4 = vec3(140.0/255.0, 1.0/155.0, 154.4/125.0);
            const vec3 c5 = vec3(1.9);
            const vec3 c6 = vec3(.105);
        
            vec2 p = gl_FragCoord.xy * 20.0 / resolution.xx;
        
            float q = fbm(p - time * 0.1);
            vec2 r = vec2(fbm(p + q + time * speed.y - p.x - p.y), fbm(p + p.x * fbm(p + q) + q - time * speed.y));
            vec3 c = mix(c6, c4, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);
            float grad = gl_FragCoord.y / resolution.y;
            gl_FragColor = vec4(c * cos(shift * gl_FragCoord.y / resolution.y), 1.0);
            gl_FragColor.xyz *= 1.0-grad;
        }
    </script>
    <div id="container"></div>
    <div id="hero-container">
              
    </div>
    <script type="text/babel" src="/javascripts/app.js"></script>
    <script type="text/babel" src="/javascripts/hero.js"></script>
  </body>
</html>
